##############################
## kubectl autocomplete
##############################
source <(kubectl completion bash)

##############################
## kubectl alias
##############################

alias k='kubectl'
alias kx="kubectx"
alias kns="kubens"

# get
alias kg='kubectl get'
alias kgall='kubectl get all'
alias kgn='kubectl get nodes'
alias kgnl='kubectl get nodes --show-labels'
alias kgnw='kubectl get nodes -o wide'
alias kgns='kubectl get namespaces'
alias kgp='kubectl get pods'
alias kgpw='kubectl get pods -o wide'
alias kgdp='kubectl get deployments.apps'
alias kgds='kubectl get daemonsets.apps'
alias kgrs='kubectl get replicasets.apps'
alias kgs='kubectl get services'
alias kgi='kubectl get ingress'
alias kgr='kubectl get routes'
alias kgpvc='kubectl get persistentvolumeclaims'
alias kgpv='kubectl get persistentvolume'

# edit
alias ke='kubectl edit'
alias ken='kubectl edit nodes'
alias kens='kubectl get namespaces'
alias kep='kubectl get pods'
alias kedp='kubectl get deployments.apps'
alias kgds='kubectl get daemonsets.apps'
alias kers='kubectl get replicasets.apps'
alias kes='kubectl get services'
alias kei='kubectl get ingress'
alias ker='kubectl get routes'
alias kepvc='kubectl get persistentvolumeclaims'
alias kepv='kubectl get persistentvolume'

# delete
alias kd='kubectl delete'
alias kdn='kubectl get nodes'
alias kdns='kubectl get namespaces'
alias kdp='kubectl get pods'
alias kddp='kubectl get deployments.apps'
alias kdds='kubectl get daemonsets.apps'
alias kdrs='kubectl get replicasets.apps'
alias kds='kubectl get services'
alias kdi='kubectl get ingress'
alias kdr='kubectl get routes'
alias kdpvc='kubectl get persistentvolumeclaims'
alias kdpv='kubectl get persistentvolume'

# describe
alias kdesc='kubectl describe'
alias kdescn='kubectl describe nodes'
alias kdescns='kubectl describe namespaces'
alias kdescp='kubectl describe pods'
alias kdescdp='kubectl describe deployments.apps'
alias kdescds='kubectl describe daemonsets.apps'
alias kdescrs='kubectl describe replicasets.apps'
alias kdescs='kubectl describe services'
alias kdesci='kubectl describe ingress'
alias kdescr='kubectl describe routes'
alias kdescpvc='kubectl describe persistentvolumeclaims'
alias kdescpv='kubectl describe persistentvolume'

# force delete
alias kdd='kubectl delete --force --grace-period=0'

# other features
alias kc='kubectl create -f'
alias ka='kubectl apply -f'
alias klog='kubectl logs -f'
alias kpf='kubectl port-forward'
alias kex='kubectl exec -it'
alias kdrain='kubectl drain --ignore-daemonsets --delete-local-data --force --grace-period=0'
alias kcon='kubectl cordon'
alias kun='kubectl uncordon'

##############################
## Autocomplete kubectl alias
##############################
function autocomplete_alias {
    local namespace="autocomplete_alias"
    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"
    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0
    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1
    local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"
    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"
        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words <<< "$alias_args"
        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
            if [[ -n "$completion_loader" ]]; then
                # force loading of completions for the aliased command
                eval "$completion_loader $alias_cmd"
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion="$(complete -p "$alias_cmd")"
        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi
        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
}; autocomplete_alias

